
FIRE_ATMEGA_LABVIEW_TX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  000004ce  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000111  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b10  00000000  00000000  00000723  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000045e  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008cc  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000238  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000596  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include<avr/io.h>
#include<util/delay.h>
#include"lcd.h"

void main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
	DDRA&=~(1<<0);
  86:	d0 98       	cbi	0x1a, 0	; 26
	PORTA|=(1<<0);
  88:	d8 9a       	sbi	0x1b, 0	; 27
	USARTInit(51);
  8a:	83 e3       	ldi	r24, 0x33	; 51
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 c8 01 	call	0x390	; 0x390 <USARTInit>
	InitLCD(0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 23 01 	call	0x246	; 0x246 <InitLCD>
	InitADC();
  98:	0e 94 bc 00 	call	0x178	; 0x178 <InitADC>
	LCDClear();
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
	LCDWriteStringXY(0,0,"LABVIEW GUI");
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteString>
	LCDWriteStringXY(0,1,"With PROTEUS");
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
  c0:	8c e6       	ldi	r24, 0x6C	; 108
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteString>
  c8:	80 e1       	ldi	r24, 0x10	; 16
  ca:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  cc:	24 e1       	ldi	r18, 0x14	; 20
  ce:	31 e0       	ldi	r19, 0x01	; 1
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x50>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <main+0x4e>
	_delay_ms(1000);
	LCDClear();
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
	LCDWriteStringXY(0,0,"FIRE M SYSTEM--------");
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
  ee:	89 e7       	ldi	r24, 0x79	; 121
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteString>
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	97 e2       	ldi	r25, 0x27	; 39
  fa:	24 e1       	ldi	r18, 0x14	; 20
  fc:	31 e0       	ldi	r19, 0x01	; 1
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x7c>
 108:	c4 e1       	ldi	r28, 0x14	; 20
 10a:	d1 e0       	ldi	r29, 0x01	; 1
	_delay_ms(1000);
	while(1)
	{
		if(!(PINA&1))
 10c:	c8 99       	sbic	0x19, 0	; 25
 10e:	1a c0       	rjmp	.+52     	; 0x144 <main+0xc2>
		{
			uint8_t FSR1=10;
			LCDClear();
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
			LCDWriteStringXY(0,0,"FIRE DETECTED");			
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
 124:	8f e8       	ldi	r24, 0x8F	; 143
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteString>
			USARTWriteChar('a');
 12c:	81 e6       	ldi	r24, 0x61	; 97
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USARTWriteChar>
 134:	84 ef       	ldi	r24, 0xF4	; 244
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	fe 01       	movw	r30, r28
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <main+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 13e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 140:	d9 f7       	brne	.-10     	; 0x138 <main+0xb6>
 142:	e4 cf       	rjmp	.-56     	; 0x10c <main+0x8a>
			_delay_ms(50);
		}
		else 
		{
			uint8_t FSR1=20;
			LCDClear();
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
			LCDWriteStringXY(0,0,"FIRE NO DETECTED ");			
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	0e 94 bf 01 	call	0x37e	; 0x37e <LCDGotoXY>
 158:	8d e9       	ldi	r24, 0x9D	; 157
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDWriteString>
			USARTWriteChar('b');
 160:	82 e6       	ldi	r24, 0x62	; 98
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <USARTWriteChar>
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	fe 01       	movw	r30, r28
 16e:	31 97       	sbiw	r30, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 172:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 174:	d9 f7       	brne	.-10     	; 0x16c <main+0xea>
 176:	ca cf       	rjmp	.-108    	; 0x10c <main+0x8a>

00000178 <InitADC>:
#include<avr/io.h>

void InitADC()
{
ADMUX=(1<<REFS0);// For Aref=AVcc;
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	87 b9       	out	0x07, r24	; 7
ADCSRA=(1<<ADEN)|(7<<ADPS0);
 17c:	87 e8       	ldi	r24, 0x87	; 135
 17e:	86 b9       	out	0x06, r24	; 6
}
 180:	08 95       	ret

00000182 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ADMUX&=0xf8;
 182:	97 b1       	in	r25, 0x07	; 7
 184:	98 7f       	andi	r25, 0xF8	; 248
 186:	97 b9       	out	0x07, r25	; 7
	ch=ch&0b00000111;
	ADMUX|=ch;
 188:	97 b1       	in	r25, 0x07	; 7
 18a:	87 70       	andi	r24, 0x07	; 7
 18c:	89 2b       	or	r24, r25
 18e:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
 190:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
 192:	34 9b       	sbis	0x06, 4	; 6
 194:	fe cf       	rjmp	.-4      	; 0x192 <ReadADC+0x10>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
 196:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
 198:	24 b1       	in	r18, 0x04	; 4
 19a:	35 b1       	in	r19, 0x05	; 5
}
 19c:	c9 01       	movw	r24, r18
 19e:	08 95       	ret

000001a0 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1a0:	84 b3       	in	r24, 0x14	; 20
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 1a6:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 1a8:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	33 e0       	ldi	r19, 0x03	; 3
 1b4:	97 9a       	sbi	0x12, 7	; 18
 1b6:	82 2f       	mov	r24, r18
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1bc:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 1be:	82 95       	swap	r24
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	92 2f       	mov	r25, r18
 1c4:	9a 95       	dec	r25
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 1c8:	97 98       	cbi	0x12, 7	; 18
 1ca:	93 2f       	mov	r25, r19
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 1d0:	97 9a       	sbi	0x12, 7	; 18
 1d2:	92 2f       	mov	r25, r18
 1d4:	9a 95       	dec	r25
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 1d8:	93 b3       	in	r25, 0x13	; 19
 1da:	92 2f       	mov	r25, r18
 1dc:	9a 95       	dec	r25
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 1e0:	97 98       	cbi	0x12, 7	; 18
 1e2:	93 2f       	mov	r25, r19
 1e4:	9a 95       	dec	r25
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 1e8:	87 fd       	sbrc	r24, 7
 1ea:	e4 cf       	rjmp	.-56     	; 0x1b4 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 1ec:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 1ee:	84 b3       	in	r24, 0x14	; 20
 1f0:	8f 60       	ori	r24, 0x0F	; 15
 1f2:	84 bb       	out	0x14, r24	; 20

}
 1f4:	08 95       	ret

000001f6 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1f6:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1f8:	66 23       	and	r22, r22
 1fa:	11 f4       	brne	.+4      	; 0x200 <LCDByte+0xa>
	CLEAR_RS();
 1fc:	96 98       	cbi	0x12, 6	; 18
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <LCDByte+0xc>
else
	SET_RS();
 200:	96 9a       	sbi	0x12, 6	; 18
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	8a 95       	dec	r24
 206:	f1 f7       	brne	.-4      	; 0x204 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 208:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 20a:	85 b3       	in	r24, 0x15	; 21
 20c:	92 2f       	mov	r25, r18
 20e:	92 95       	swap	r25
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 216:	95 bb       	out	0x15, r25	; 21
 218:	93 e0       	ldi	r25, 0x03	; 3
 21a:	89 2f       	mov	r24, r25
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 220:	97 98       	cbi	0x12, 7	; 18
 222:	89 2f       	mov	r24, r25
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 228:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 22a:	85 b3       	in	r24, 0x15	; 21
 22c:	2f 70       	andi	r18, 0x0F	; 15
 22e:	80 7f       	andi	r24, 0xF0	; 240
 230:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 232:	85 bb       	out	0x15, r24	; 21
 234:	89 2f       	mov	r24, r25
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 23a:	97 98       	cbi	0x12, 7	; 18
 23c:	9a 95       	dec	r25
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 240:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDBusyLoop>
}
 244:	08 95       	ret

00000246 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 246:	1f 93       	push	r17
 248:	18 2f       	mov	r17, r24
 24a:	8c e2       	ldi	r24, 0x2C	; 44
 24c:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 24e:	24 e1       	ldi	r18, 0x14	; 20
 250:	31 e0       	ldi	r19, 0x01	; 1
 252:	f9 01       	movw	r30, r18
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <InitLCD+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 258:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 25a:	d9 f7       	brne	.-10     	; 0x252 <InitLCD+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 25c:	84 b3       	in	r24, 0x14	; 20
 25e:	8f 60       	ori	r24, 0x0F	; 15
 260:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 262:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 264:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 266:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	80 7f       	andi	r24, 0xF0	; 240
 26c:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 26e:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 270:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 272:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <InitLCD+0x30>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 27a:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27c:	a9 9a       	sbi	0x15, 1	; 21
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	98 2f       	mov	r25, r24
 282:	9a 95       	dec	r25
 284:	f1 f7       	brne	.-4      	; 0x282 <InitLCD+0x3c>
	_delay_us(1);
	CLEAR_E();
 286:	97 98       	cbi	0x12, 7	; 18
 288:	8a 95       	dec	r24
 28a:	f1 f7       	brne	.-4      	; 0x288 <InitLCD+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 28c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 290:	81 2f       	mov	r24, r17
 292:	8c 60       	ori	r24, 0x0C	; 12
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
}
 2a2:	1f 91       	pop	r17
 2a4:	08 95       	ret

000002a6 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
	msg++;
 2b4:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2b6:	88 81       	ld	r24, Y
 2b8:	88 23       	and	r24, r24
 2ba:	c9 f7       	brne	.-14     	; 0x2ae <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	df 93       	push	r29
 2cc:	cf 93       	push	r28
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <LCDWriteInt+0xe>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <LCDWriteInt+0x10>
 2d2:	0f 92       	push	r0
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	9c 01       	movw	r18, r24
 2da:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2dc:	fe 01       	movw	r30, r28
 2de:	31 96       	adiw	r30, 0x01	; 1
 2e0:	85 e0       	ldi	r24, 0x05	; 5
 2e2:	df 01       	movw	r26, r30
 2e4:	1d 92       	st	X+, r1
 2e6:	8a 95       	dec	r24
 2e8:	e9 f7       	brne	.-6      	; 0x2e4 <LCDWriteInt+0x22>
 2ea:	fe 01       	movw	r30, r28
 2ec:	35 96       	adiw	r30, 0x05	; 5
 2ee:	0d c0       	rjmp	.+26     	; 0x30a <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 2f0:	c9 01       	movw	r24, r18
 2f2:	6a e0       	ldi	r22, 0x0A	; 10
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 2fa:	80 83       	st	Z, r24
	val=val/10;
 2fc:	c9 01       	movw	r24, r18
 2fe:	6a e0       	ldi	r22, 0x0A	; 10
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 306:	9b 01       	movw	r18, r22
 308:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 30a:	21 15       	cp	r18, r1
 30c:	31 05       	cpc	r19, r1
 30e:	81 f7       	brne	.-32     	; 0x2f0 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 310:	bf ef       	ldi	r27, 0xFF	; 255
 312:	0f 3f       	cpi	r16, 0xFF	; 255
 314:	1b 07       	cpc	r17, r27
 316:	79 f4       	brne	.+30     	; 0x336 <LCDWriteInt+0x74>
 318:	20 e0       	ldi	r18, 0x00	; 0
 31a:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 31c:	ae 01       	movw	r20, r28
 31e:	4f 5f       	subi	r20, 0xFF	; 255
 320:	5f 4f       	sbci	r21, 0xFF	; 255
 322:	02 c0       	rjmp	.+4      	; 0x328 <LCDWriteInt+0x66>
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	3f 4f       	sbci	r19, 0xFF	; 255
 328:	fa 01       	movw	r30, r20
 32a:	e2 0f       	add	r30, r18
 32c:	f3 1f       	adc	r31, r19
 32e:	80 81       	ld	r24, Z
 330:	88 23       	and	r24, r24
 332:	c1 f3       	breq	.-16     	; 0x324 <LCDWriteInt+0x62>
 334:	04 c0       	rjmp	.+8      	; 0x33e <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 336:	25 e0       	ldi	r18, 0x05	; 5
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	20 1b       	sub	r18, r16
 33c:	31 0b       	sbc	r19, r17
 33e:	7e 01       	movw	r14, r28
 340:	08 94       	sec
 342:	e1 1c       	adc	r14, r1
 344:	f1 1c       	adc	r15, r1
 346:	e2 0e       	add	r14, r18
 348:	f3 1e       	adc	r15, r19
 34a:	89 01       	movw	r16, r18
 34c:	09 c0       	rjmp	.+18     	; 0x360 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 34e:	f7 01       	movw	r30, r14
 350:	81 91       	ld	r24, Z+
 352:	7f 01       	movw	r14, r30
 354:	80 5d       	subi	r24, 0xD0	; 208
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 35c:	0f 5f       	subi	r16, 0xFF	; 255
 35e:	1f 4f       	sbci	r17, 0xFF	; 255
 360:	05 30       	cpi	r16, 0x05	; 5
 362:	11 05       	cpc	r17, r1
 364:	a4 f3       	brlt	.-24     	; 0x34e <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	cf 91       	pop	r28
 372:	df 91       	pop	r29
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 37e:	88 32       	cpi	r24, 0x28	; 40
 380:	30 f4       	brcc	.+12     	; 0x38e <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 382:	61 11       	cpse	r22, r1
 384:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 386:	80 68       	ori	r24, 0x80	; 128
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDByte>
 38e:	08 95       	ret

00000390 <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
 390:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
 392:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
 394:	86 e8       	ldi	r24, 0x86	; 134
 396:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN)|(1<<RXCIE)|(1<<TXCIE);
 398:	88 ed       	ldi	r24, 0xD8	; 216
 39a:	8a b9       	out	0x0a, r24	; 10


}
 39c:	08 95       	ret

0000039e <USARTReadChar>:
//available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
 39e:	5f 9b       	sbis	0x0b, 7	; 11
 3a0:	fe cf       	rjmp	.-4      	; 0x39e <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
 3a2:	8c b1       	in	r24, 0x0c	; 12
}
 3a4:	08 95       	ret

000003a6 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 3a6:	5d 9b       	sbis	0x0b, 5	; 11
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 3aa:	8c b9       	out	0x0c, r24	; 12
}
 3ac:	08 95       	ret

000003ae <USARTWriteInt>:



void USARTWriteInt(int val,unsigned int field_length)
{
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	df 93       	push	r29
 3b4:	cf 93       	push	r28
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <USARTWriteInt+0xa>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <USARTWriteInt+0xc>
 3ba:	0f 92       	push	r0
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	9c 01       	movw	r18, r24
 3c2:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 3c4:	fe 01       	movw	r30, r28
 3c6:	31 96       	adiw	r30, 0x01	; 1
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	df 01       	movw	r26, r30
 3cc:	1d 92       	st	X+, r1
 3ce:	8a 95       	dec	r24
 3d0:	e9 f7       	brne	.-6      	; 0x3cc <USARTWriteInt+0x1e>
 3d2:	fe 01       	movw	r30, r28
 3d4:	35 96       	adiw	r30, 0x05	; 5
 3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <USARTWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 3d8:	c9 01       	movw	r24, r18
 3da:	6a e0       	ldi	r22, 0x0A	; 10
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 3e2:	80 83       	st	Z, r24
	val=val/10;
 3e4:	c9 01       	movw	r24, r18
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 3e 02 	call	0x47c	; 0x47c <__divmodhi4>
 3ee:	9b 01       	movw	r18, r22
 3f0:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 3f2:	21 15       	cp	r18, r1
 3f4:	31 05       	cpc	r19, r1
 3f6:	81 f7       	brne	.-32     	; 0x3d8 <USARTWriteInt+0x2a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 3f8:	bf ef       	ldi	r27, 0xFF	; 255
 3fa:	0f 3f       	cpi	r16, 0xFF	; 255
 3fc:	1b 07       	cpc	r17, r27
 3fe:	71 f4       	brne	.+28     	; 0x41c <USARTWriteInt+0x6e>
 400:	a0 e0       	ldi	r26, 0x00	; 0
 402:	b0 e0       	ldi	r27, 0x00	; 0
		while(str[j]==0) j++;
 404:	9e 01       	movw	r18, r28
 406:	2f 5f       	subi	r18, 0xFF	; 255
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	01 c0       	rjmp	.+2      	; 0x40e <USARTWriteInt+0x60>
 40c:	11 96       	adiw	r26, 0x01	; 1
 40e:	f9 01       	movw	r30, r18
 410:	ea 0f       	add	r30, r26
 412:	fb 1f       	adc	r31, r27
 414:	80 81       	ld	r24, Z
 416:	88 23       	and	r24, r24
 418:	c9 f3       	breq	.-14     	; 0x40c <USARTWriteInt+0x5e>
 41a:	04 c0       	rjmp	.+8      	; 0x424 <USARTWriteInt+0x76>
	else
		j=5-field_length;
 41c:	a5 e0       	ldi	r26, 0x05	; 5
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	a0 1b       	sub	r26, r16
 422:	b1 0b       	sbc	r27, r17

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
 424:	a5 30       	cpi	r26, 0x05	; 5
 426:	b1 05       	cpc	r27, r1
 428:	ac f4       	brge	.+42     	; 0x454 <USARTWriteInt+0xa6>
	{
	USARTWriteChar(48+str[i]);
 42a:	ac 0f       	add	r26, r28
 42c:	bd 1f       	adc	r27, r29
 42e:	11 96       	adiw	r26, 0x01	; 1
 430:	8c 91       	ld	r24, X
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 432:	5d 9b       	sbis	0x0b, 5	; 11
 434:	fe cf       	rjmp	.-4      	; 0x432 <USARTWriteInt+0x84>
		j=5-field_length;

	if(val<0) USARTWriteChar('-');
	for(i=j;i<5;i++)
	{
	USARTWriteChar(48+str[i]);
 436:	80 5d       	subi	r24, 0xD0	; 208
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 438:	8c b9       	out	0x0c, r24	; 12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	9c e6       	ldi	r25, 0x6C	; 108
 43e:	fc 01       	movw	r30, r24
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <USARTWriteInt+0x92>
 444:	fc 01       	movw	r30, r24
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <USARTWriteInt+0x98>
 44a:	fc 01       	movw	r30, r24
 44c:	31 97       	sbiw	r30, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <USARTWriteInt+0x9e>
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <USARTWriteInt+0xa2>
	//USARTWriteChar(48+str[i]);
	for(i=0;i<4;i++)
	{
	_delay_ms(10);
	}
}}
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	cf 91       	pop	r28
 460:	df 91       	pop	r29
 462:	1f 91       	pop	r17
 464:	0f 91       	pop	r16
 466:	08 95       	ret

00000468 <write>:

void write(char *msg)
{
 468:	fc 01       	movw	r30, r24
 46a:	04 c0       	rjmp	.+8      	; 0x474 <write+0xc>
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
 46c:	5d 9b       	sbis	0x0b, 5	; 11
 46e:	fe cf       	rjmp	.-4      	; 0x46c <write+0x4>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
 470:	8c b9       	out	0x0c, r24	; 12
{
	
	while(*msg!='\0')
 {
	USARTWriteChar(*msg);
	msg++;
 472:	31 96       	adiw	r30, 0x01	; 1
}}

void write(char *msg)
{
	
	while(*msg!='\0')
 474:	80 81       	ld	r24, Z
 476:	88 23       	and	r24, r24
 478:	c9 f7       	brne	.-14     	; 0x46c <write+0x4>
 {
	USARTWriteChar(*msg);
	msg++;
 }
}
 47a:	08 95       	ret

0000047c <__divmodhi4>:
 47c:	97 fb       	bst	r25, 7
 47e:	09 2e       	mov	r0, r25
 480:	07 26       	eor	r0, r23
 482:	0a d0       	rcall	.+20     	; 0x498 <__divmodhi4_neg1>
 484:	77 fd       	sbrc	r23, 7
 486:	04 d0       	rcall	.+8      	; 0x490 <__divmodhi4_neg2>
 488:	0c d0       	rcall	.+24     	; 0x4a2 <__udivmodhi4>
 48a:	06 d0       	rcall	.+12     	; 0x498 <__divmodhi4_neg1>
 48c:	00 20       	and	r0, r0
 48e:	1a f4       	brpl	.+6      	; 0x496 <__divmodhi4_exit>

00000490 <__divmodhi4_neg2>:
 490:	70 95       	com	r23
 492:	61 95       	neg	r22
 494:	7f 4f       	sbci	r23, 0xFF	; 255

00000496 <__divmodhi4_exit>:
 496:	08 95       	ret

00000498 <__divmodhi4_neg1>:
 498:	f6 f7       	brtc	.-4      	; 0x496 <__divmodhi4_exit>
 49a:	90 95       	com	r25
 49c:	81 95       	neg	r24
 49e:	9f 4f       	sbci	r25, 0xFF	; 255
 4a0:	08 95       	ret

000004a2 <__udivmodhi4>:
 4a2:	aa 1b       	sub	r26, r26
 4a4:	bb 1b       	sub	r27, r27
 4a6:	51 e1       	ldi	r21, 0x11	; 17
 4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <__udivmodhi4_ep>

000004aa <__udivmodhi4_loop>:
 4aa:	aa 1f       	adc	r26, r26
 4ac:	bb 1f       	adc	r27, r27
 4ae:	a6 17       	cp	r26, r22
 4b0:	b7 07       	cpc	r27, r23
 4b2:	10 f0       	brcs	.+4      	; 0x4b8 <__udivmodhi4_ep>
 4b4:	a6 1b       	sub	r26, r22
 4b6:	b7 0b       	sbc	r27, r23

000004b8 <__udivmodhi4_ep>:
 4b8:	88 1f       	adc	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	5a 95       	dec	r21
 4be:	a9 f7       	brne	.-22     	; 0x4aa <__udivmodhi4_loop>
 4c0:	80 95       	com	r24
 4c2:	90 95       	com	r25
 4c4:	bc 01       	movw	r22, r24
 4c6:	cd 01       	movw	r24, r26
 4c8:	08 95       	ret

000004ca <_exit>:
 4ca:	f8 94       	cli

000004cc <__stop_program>:
 4cc:	ff cf       	rjmp	.-2      	; 0x4cc <__stop_program>
